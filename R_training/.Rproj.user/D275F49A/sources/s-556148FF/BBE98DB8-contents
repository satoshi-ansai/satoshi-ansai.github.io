---
title: "Rを用いたデータ解析の <br> 基礎とその実践"
subtitle: "Step 1：Rの基本をマスターしよう！ "
author: "安齋 賢（東北大学 大学院生命科学研究科 分子行動分野） "
date: "※石川由希博士（名古屋大学）が作製した資料を再構成したものです。<br>※資料の一部は岩嵜航博士（東北大学）が作製したものです。<br><br>（左右キーで進みます！）"
output:
  ioslides_presentation
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)
```


## 研究の基本プロセスはいつも一緒

### 1. 課題を見つける／仮説を立てる  
### 2. 実験や観察をしてデータを集める  
### 3. <span style="color: darkred;">**データを整理する**</span>  
### 4. <span style="color: darkred;">**データを解析して仮説を検証する**</span>  
<br/>  

- 実験や観察は研究の半分くらい！
- 残り半分はデータの整理＆解析！
- 解析によっては宝石になるはずのデータも単なる石ころに…！


## 科学の営み = 巨人の肩に立つ
### 先人たちの積み重ねに基づいて、新しい発見をする  
### **記録を残すことは何より重要**  
- 実験や野外観察では些細なことも漏らさず記録。  
- 生データは何重にもバックアップ。  

### **データ整理・解析・作図も不可欠。だけど…**  
- 再現不能の職人技で切り抜けてしまう人も多い。  
- コピペ、メニュー選択、配色と配置を微調整…  

### **猜疑が生じたら…？別の人が研究を発展させたいとき…？**  
❌「ありまぁす！」  
⭕「誰でも確実に再現できるプロトコルがこちらです」   


## 再現不可能な職人的研究の例...
- 動物園の混合展示で、各動物がどのように分布・行動しているか。それらを決める要因は何か。
- 膨大な観察データに基づく超大作卒論。  
<br>
<div align="center">
![](figures/thesis-19467.jpg){width=720px}</div>


## 生データ：ここはまだそんなに悪くない
- 週に１回、各個体の位置と行動を種ごとのファイルに記録。
- タブは個体、A,B列はXY座標でそれ以降は行動、各行は時刻。  
<br>
<div align="center">
![](figures/figure.001.jpg){width=750px}
</div>

## コピペを駆使して条件ごとに複製・集計
- ちゃんと合ってるのかな…ファイルもタブもたくさん…
- どこから何をコピーしてたのか、もはや思い出せない…  
<br>
<div align="center">
![](figures/figure.002.jpg){width=750px}
</div>


## コピペを駆使して条件ごとに複製・集計
- ちゃんと合ってるのかな…ファイルもタブもたくさん…
- どこから何をコピーしてたのか、もはや思い出せない…  
<br>
<div align="center">
![](figures/figure.003.jpg){width=750px}
</div>


## 手動で数え、濃淡を計算し、<br>画像ソフトで塗る...
- 泣きながら何十枚も…。無料期間が終わって今は使えない…。 
<br>
<div align="center">
![](figures/figure.004.jpg){width=750px}
</div>


## 目作業・手作業 = シーシュボスの岩
<style>
.column-left70{
  float: left;
  width: 70%;
  text-align: left;
}
.column-right30{
  float: right;
  width: 30%;
  text-align: left;
}
.column-all{
  float: right;
  width: 100%;
  text-align: left;
}
</style>

<div class="column-left70">
- **膨大な単純作業**がそもそもツラい  
- 人間だもの、**ミスは防ぎきれない**  
- ミスを防ぐためのチェックもツラい  
- ミスを発見 → **初めからやり直し**  
- 新たなデータ・研究 → **初めからやり直し**  
- 熟練してもツラいまま  
</div>

<div class="column-right30">
![](figures/Punishment_sisyph-19748.jpg){width=200px}<font size="1">https://en.wikipedia.org/wiki/Sisyphus</font>
</div>  

<div class="column-all">
- その時の自分しかできない、記録に残らない  
→**検証のしようがない**
- 卒論なら努力賞で良いかもだけど、科学の手続きとしては問題
</div>  


## プログラミングで大量のファイルを捌く
- 先の例に負けず生データはどっさり。でも頑張るのは機械。 
<br>
<div align="center">
![](figures/figure.005.jpg){width=750px}


## プログラミングで再現性の良い研究を！
<div align="center">
![](figures/computer_programming_woman.jpg){width=250px}

<div align="left">
- 規則性のある退屈な仕事は人間よりも機械の方が得意
- 一度書いたプログラムは、データが変わっても**使いまわせる**
- **自分以外の人でも再現・検証**できる
- **きれいな図を簡単に**かける
- 部分的に改変しながらいろんな解析を試せる。  
→ **仮説検証**だけなく、**仮説生成（探索的データ解析）**にも良い
- やれば上達する！どんどん楽になる！！

## Rとは
<style>
.column-left15{
  float: left;
  width: 15%;
  text-align: left;
}
.column-right80{
  float: right;
  width: 80%;
  text-align: left;
}
.column-all{
  float: right;
  width: 100%;
  text-align: left;
}
</style>

<div class="column-left15">
![](figures/pasted-image-20059.jpg){width=120px}
</div>

<div class="column-right80">
<br>
<br>
統計解析と作図の機能が充実したプログラミング言語
</div>

<div class="column-all">
### **クロスプラットフォーム**  
- Linux, Mac, Windowsで動く。  

### **オープンソース**  
- 永久に無償で、すべての機能を使える。  
- 集合知によって常に進化している。  

### **コミュニティ**  
- 相談できる人や参考になるウェブサイトがたくさん見つかる。  
<span style="font-size : 12pt">
他のプログラミング言語でもできなくはない。Pythonもいい。
</span>


## 本実習の目標

### **科学的なデータ解析の基本を身につける**
- 解析しやすいデータの形
- 再現可能な解析方法

### **必要な解析方法を調べ、実践する方法を知る**
- 困ったらどうしたら良いか

### **これさえ押さえれば、具体的なやり方は覚えなくてOK**

## Rと接する上での心構え
![](figures/akusyu_uchuujin.jpg){width=200px}

### **エラー文を恐れない**
#### 熟練したプログラマーでエラーは当たり前。エラー文はRさんからのメッセージ。まずは落ち着いてエラー文を読んで、コードを書きなおしてみよう。

### **困ったらググる**
#### Rは全世界にユーザーがいるので、自分が困っていることは、必ず誰かが解決している。困ったら、日本語で、英語で、エラー文で、ググって調べると解決策が見つかるはず！



## プログラミングの身につけ方
### **とにかく手を動かして体感すること！**
1. コードはコピペして手元で動かしてみよう
2. 動いたら、自分用に改変しよう（引用も忘れずに）
    - 動かなかったらエラーコードを見ながら動くまで試行錯誤
3. 改変したコードが動かなかったら、何が悪いのか調べよう
    - コードやデータをよく見比べる
    
### **エラーを解決した経験値 = プログラミングの経験値**
- エラーを恐れずどんどん書こう！

### 困ったら...
- ググる／TAさんに訊く／[よくあるエラー集](R_training_2021_7.html)を見る

## この実習の取り組み方（1/2）
### 1. この枠が出てきたらコピペして自分のPCで走らせる
- （やり方はこのあと教えます）
```{r, echo = TRUE,eval=FALSE}
head(iris)      
```

### 2. コンソールを確認する
- 思ったとおりの出力が出てきたか？
- ErrorやWarning（赤文字）が出ていたらよく読んで対応する
    - 問題ないWarningもあるのでよく読んで

### 3.  [練習問題]はまず答えを見ずに自分でコードを書いてみる
- これまでのコードをコピペして改変すればできるはず


## この実習の取り組み方（2/2）
### 4. 自分のデータをとる（自由課題）
### 5. スライドを見直して、使えそうな方法で解析する
- ErrorやWarning（赤文字）が出たら何とか解決する
- 前半の演習部分でのエラー経験がここで生きてくる（はず）！



## さっそく使ってみよう！
### RStudioのアイコンをダブルクリック！
<div class="column-left15">
![](figures/スクリーンショット 2019-06-26 23.24.04-12688.jpg){width=720px}
</div>


## RStudioの設定を確認！
- Win: Tools → Global options
- Mac: RStudio → References

<br>  

![](figures/rstudio_workspace.png)

## プロジェクトを作ろう！
- まずは「プロジェクト」を作成する
- 以下の順でクリックして進む
    - File → New Project → New Directory → New Project → Create New Project
- Directory Nameは「R_training_2021」と入力  
![](figures/スクリーンショット 2021-03-28 16.04.43.jpg){width=750px}


## 基本１：スクリプトに書いてから実行
- 以下の順でクリックして進む
    - File → New File → R Script
![](figures/スクリーンショット 2021-03-28 16.07.53.jpg){width=750px}

## 基本１：スクリプトに書いてから実行
- 以下の順でクリックして進む
    - File → New File → R Script
![](figures/スクリーンショット 2021-03-28 16.12.27.jpg){width=800px}

## 基本２：スクリプトを保存する

- 以下の順でクリックして進む
    - File → Save
    - ファイル名は「R_training_2021_script」
    - 場所はさっき作ったプロジェクト（フォルダ）の中
    - 保存されている場所を確かめておこう
    
- **スクリプトを書いたら消さずに保存すること！**
    - 書いた／集めたスクリプトは財産
    - 保存しておけばまた使い回せる

## 基本３：Rと会話する
- まずは１＋１から！
- スクリプトに1 + 1と書く → 1 + 1を選択 → Ctrl + Enter
- **コンソールに入れないとRに伝わらない**
![](figures/スクリーンショット 2021-03-28 16.18.29.jpg){width=800px}

## 基本３：Rと会話する
できた人は･･･  


### ［練習問題］
- 1 + 2 + 3
- 3 * 7 * 2
- 4 ÷ 2
- 4 ÷ 3
- 他にも好きな計算をしてみよう！


## 覚えておくと役立つこと(1)
- 記号の前後にはスペースを空けるクセをつけよう！
- **1+1   **←Bad
- **1 + 1** ←Good!!
- コードが見やすくなり、間違いが起こりにくい！


## 覚えておくと役立つこと(2)
- ショートカットを使いこなそう！
![](figures/スクリーンショット 2021-03-28 16.28.09.jpg){width=800px}


## 変数を使ってみよう！
### **変数に値を代入する**　※代入演算子は 「=」「<-」
```{r, echo = TRUE, results = 'hide'}
x = 2          #xに2を代入
x              #xは何か訊く
```

<br>
<div class="column-all">
- スクリプトを書くだけでは何も起こらないので
- <span style="color: darkred;">**選択した状態で Ctrl + Enter**</span>してコンソールへ渡す！  
- 「#」をつけるとRは無視してくれます。メモを書くのに便利。   
</div>


## 変数を使ってみよう！
### **変数に値を代入する**　※代入演算子は 「=」「<-」
```{r, echo = TRUE}
x = 2          #xに2を代入
x              #xってなんだっけ？
```

- ↑ こういう結果がコンソールに表示されるはず
- 今後、コードと結果はこのように示します！


## 変数を使ってみよう！
### **変数に値を代入する**　※代入演算子は 「=」「<-」
```{r, echo = TRUE}
x = 2          #xに2を代入
x              #xってなんだっけ？
```

```{r, echo = TRUE, results='hide'}
y = 5          #yに5を代入
y              #yってなんだっけ？
```


## 変数を使ってみよう！
### **変数に値を代入する**　※代入演算子は 「=」「<-」
```{r, echo = TRUE}
x = 2          #xに2を代入
x              #xってなんだっけ？
```

```{r, echo = TRUE}
y = 5          #yに5を代入
y              #yってなんだっけ？
```

```{r, echo = TRUE, results='hide'}
x + y          #xとyを足す      
```


## 変数を使ってみよう！
### **変数に値を代入する**　※代入演算子は 「=」「<-」
```{r, echo = TRUE}
x = 2          #xに2を代入
x              #xってなんだっけ？
```

```{r, echo = TRUE}
y = 5          #yに5を代入
y              #yってなんだっけ？
```

```{r, echo = TRUE}
x + y          #xとyを足す      
```


## 変数を使ってみよう！
### **変数に値を代入する**　※代入演算子は 「=」「<-」
### ［練習問題］
- xとyをかけてみよう
- x ÷ y は？
- 他にもいろいろ計算してみよう
- （次ページに答えがあります）
- （進む前にまず自分で考えてみて…！）


## 変数を使ってみよう！
### **変数に値を代入する**　※代入演算子は 「=」「<-」
### ［練習問題］
```{r, echo = TRUE}
x * y       
```

```{r, echo = TRUE}
x / y       
```

## Rで扱うデータの型（class）を知ろう
### 要素の型
- logical：論理値　例）TRUE, FALSE
- numeric：数値　例）1, 2, 3, 4, 5…
- character：文字列　例）"a", "b"…　（""で囲むと文字になる）
- factor：因子


## データ型（class）を扱おう
### **変数のデータの型を調べる／変える**
```{r, echo = TRUE}
class(x)           #xはどのclass？
```
```{r, echo = TRUE}
is.numeric(x)      #xはnumeric（数値）？
```
```{r, echo = TRUE}
is.character(x)    #xは文字列（character）？
```
```{r, echo = TRUE}
z = as.character(x)    #x(= 2)を文字列（character）としてzに入れて！
```


## データ型（class）を扱おう
### ［練習問題］
- zの型を訊いてみよう
- zを数値としてzに上書きして、zの型を確認しよう
- （次ページに答えがあります）


## データ型（class）を扱おう
### ［練習問題］
```{r, echo = TRUE}
class(z)               #zはどのclass？
```
```{r, echo = TRUE}
z = as.numeric(z)      #zを数値としてzに入れて！（自動的に上書きになる）
class(z)               #zはどのclass？
```

## Rで扱うデータの種類を知ろう
### データの種類
- **ベクトル（vector）**…１次元の配列。全要素が同じ型。
- **データフレーム（data.frame）**  
    - 同じ長さのvectorを並べた長方形のテーブル。超重要！
- 行列（matrix）…２次元の行列。全要素が同じ型。
- リスト（list）…異なる型でも詰め込める太っ腹vector。

## ベクトル（vector）を扱おう
### **vector…同じ型の要素の１次元の配列。**
- 例）c(1, 2, 3, 5)，c(“Yuki”, “Ryoya”, “Azusa”)
- ちなみにcはconbine（結合）のcからきてる
```{r, echo = TRUE}
x = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)  #xに数値を代入
x * 3                                 #xに3をかける
```
```{r, echo = TRUE}
sqrt(x)                               #xを平方する
```
- 一回でベクトル全てに計算を当てはめてくれる！便利！


## ベクトル（vector）を扱おう
### **vector…同じ型の要素の１次元の配列。**
```{r, echo = TRUE}
y = 1:10　　　　　 　#1から10までの整数からなるベクトル
y                  #yは何か訊く
```
```{r, echo = TRUE}
x < 5              #5よりも小さい？（こういう訊き方もできます）
```


## ベクトル（vector）を扱おう
### ［練習問題］
- -5から2までの整数からなるベクトルzを作ろう
- ベクトルxとyをかけよう
- ベクトルxとzをかけたらどうなる？
- （次ページに答えがあります）


## ベクトル（vector）を扱おう
### ［練習問題］
```{r, echo = TRUE}
z = -5:2　　　　　
z
```
```{r, echo = TRUE}
x*y
```
```{r, echo = TRUE}
x*z       #要素の数が一致しないためにエラーになる
```


## Rで扱うデータの種類を知ろう
### データの種類
- **ベクトル（vector）**…１次元の配列。全要素が同じ型。
- **データフレーム（data.frame）**  
    - 同じ長さのvectorを並べた長方形のテーブル。超重要！
- 行列（matrix）…２次元の行列。全要素が同じ型。
- リスト（list）…異なる型でも詰め込める太っ腹vector。


## データフレームを使ってみよう
### **data.frame…同じ長さのベクトルでできた長方形のデータ**
### データフレームを作るには…
1. ベクトルを結合させる
2. CSVファイルを読み込む → [あとでやります](R_training_2021_5.html)

## データフレームを使ってみよう
### **ベクトルを結合させてdata.frameを作る**
```{r, echo = TRUE}
x = 1:10            #1から10までの整数からなるベクトル
y = -4:5            #-4から5までの整数からなるベクトル
q = c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j") #文字10個
theDF = data.frame(x, y, q) #theDFという名前のデータフレームにまとめる
theDF                #theDFの中身を見せて
```


## データフレームを使ってみよう
### **列のタイトルをつけることもできます**
```{r, echo = TRUE}
theDF = data.frame(First = x, Second = y, Moji = q)
theDF                         #theDFの中身を見せて
```


## データフレームを使ってみよう
### **データフレームを眺めてみよう**
```{r, echo = TRUE}
nrow(theDF)       #theDFの行数は？
ncol(theDF)       #theDFの列数は？
head(theDF)       #最初の数行を見る。データの確認によく使います！覚えてね！
```


## データフレームを使ってみよう
### ［練習問題］
- 以下のようなdata.frameを作ってtheDF2と名付けよう。
```{r, echo = FALSE}
a = c(1, 3, 5)
b = c("x", "y", "z")
theDF2 = data.frame(bio = a, logy = b)
head(theDF2)
```
- theDF2の中身をheadで確認しよう。
- （次ページに答えがあります）


## データフレームを使ってみよう
### ［練習問題］
```{r, echo = TRUE, results = FALSE}
a = c(1, 3, 5)
b = c("x", "y", "z")
theDF2 = data.frame(bio = a, logy = b)
head(theDF2)
```
```{r, echo = TRUE, results = TRUE}
bio = c(1, 3, 5)
logy = c("x", "y", "z")
theDF2 = data.frame(bio, logy)
head(theDF2)
```


## データフレームを使ってみよう
### **データフレームからデータを取り出そう**
```{r, echo = TRUE}
theDF$Moji　　　　  # theDFのMoji列
```
```{r, echo = TRUE, results = TRUE}
theDF[3, 2]　　　　 # theDFの3行目2列目
```
```{r, echo = TRUE, results = TRUE}
theDF[3, 2:3]　　　 # theDFの3行目2~3列目
```


## データフレームを使ってみよう
### **データフレームからデータを取り出そう**
```{r, echo = TRUE}
theDF[, 3]　　　　  # theDFの3列目
```
```{r, echo = TRUE, results = TRUE}
theDF[2, ]　　　　  # theDFの2行目
```


## データフレームを使ってみよう
### ［練習問題］
- 以下のデータを取り出そう！
    - theDF2のbio列
    - theDF2の2行目
    - theDF2の2列目
- （次ページに答えがあります）


## データフレームを使ってみよう
### ［練習問題］
```{r, echo = TRUE}
theDF2$bio　　　　  # theDF2のbio列
```
```{r, echo = TRUE, results = TRUE}
theDF2[2, ]　　　　# theDF2の2行目
```
```{r, echo = TRUE, results = TRUE}
theDF2[, 2]　　　 # theDF2の2列目
```


## パッケージ（package）を使おう！
### パッケージとは：
### 便利な関数やデータセットなどをひとまとめにしたもの
<br>

### **Standard Packages**
- Rの標準機能。何もしなくても使用可能。

### **Contributed Packages**
- 有志により開発され、CRANにまとめて公開されている。
- 要インストール。使う前に読み込むおまじないが必要。


## パッケージを使ってみよう
### パッケージをインストールする
### **コードを打つ**
```{r, echo = TRUE, eval = FALSE}
install.packages("tidyverse")    #インストールは最初の１回でOK
library(tidyverse)               #読み込みはRを起動するたびに必要
```
### **マウスでポチポチもできる**
<div class="column-left15">
![](figures/スクリーンショット 2021-03-30 14.46.09.jpg){width=800px}


## パッケージを使ってみよう
### パッケージをインストールする
### **コードを打つ**
```{r, echo = TRUE, eval = FALSE}
install.packages("tidyverse")    #インストールは最初の１回でOK
library(tidyverse)               #読み込みはRを起動するたびに必要
```
### **マウスでポチポチもできる**
<div class="column-left15">
![](figures/スクリーンショット 2021-03-30 14.46.13.jpg){width=800px}


## tidyverseをインストールしよう！
```{r, echo = TRUE, eval = FALSE}
install.packages("tidyverse")    #インストールは最初の１回でOK
library(tidyverse)               #読み込みはRを起動するたびに必要
```
### **tidyverseとは：データを上手に扱うためのパッケージ群**
![](figures/スクリーンショット 2021-03-30 14.58.38.jpg){width=800px}

- 統一的な使い勝手
- 暗黙の処理をなるべくしない安全設計
- シンプルな関数をつなげて使うデザイン



## 疑問やエラーの解決方法
- **エラーの８割は凡ミスです！よく確認しよう！**
    - （ミスを発見しやすいように表示を大きく！！）
    - エラーコードをよく読もう
    - [よくあるエラー集](R_training_2021_7.html)を作りました
- **パッケージ名やエラー文をコピペしてウェブ検索しよう**
    - StackOverflowや個人サイトに解決策があったりする
    - r-wakalang（熟練Rおじさんが教えてくれるSlack）
- **Rヘルプやパッケージの公式ドキュメントを読もう**


## 引用{.smaller}

### 講義・ウェブサイト
- R全般
    - [R自学自習の基礎知識（Heavy Watal）](https://heavywatal.github.io)  
    - [R-tips](http://cse.naro.affrc.go.jp/takezawa/r-tips/r.html)  
    - [RとRstudio入門](https://kazutan.github.io/JSSP2018_spring/index.html)

- ggplot2を使った可視化
    - [ggplot2オフィシャルサイト](https://ggplot2.tidyverse.org/index.html)  
    - [ggplot2 の自分用メモ集を作ろう（Triad sou.）](http://triadsou.hatenablog.com/entry/20100528/1275042816)  

- Rを使った統計解析
    - [Rによる統計解析（青木 繁伸）](http://aoki2.si.gunma-u.ac.jp/R/index.html)  
    - [biostatistics](https://stats.biopapyrus.jp/)


## 引用{.smaller}

### 書籍
- 「みんなのR」（ISBN: 978-4839962159）
- 「Rによるやさしい統計学」（ISBN: 978-4274067105）
- 「＜新版＞統計学の基礎」（ISBN: 978-4890261710）
- 「データ解析のための統計モデリング入門」（ISBN: 978-4000069731）



###  **→[Step 2：データを可視化しよう](R_training_2021_3.html)**