---
title: "Rを用いたデータ解析の <br> 基礎とその実践"
author: "安齋 賢（東北大学 大学院生命科学研究科 分子行動分野） "
date: "※石川由希博士（名古屋大学）が作製した資料を再構成したものです。<br>※資料の一部は岩嵜航博士（東北大学）が作製したものです。<br><br>（左右キーで進みます！）"
output:
  ioslides_presentation: default
  beamer_presentation: default
subtitle: Step 4：自分のデータを扱おう！
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)
```

<style>
.column-left50{
  float: left;
  width: 50%;
  text-align: left;
}
.column-right50{
  float: right;
  width: 50%;
  text-align: left;
}
.column-all{
  float: right;
  width: 100%;
  text-align: center;
}
</style>


## 自分のデータを扱おう！

### 1. 課題を見つける／仮説を立てる  
### 2. 実験や観察をしてデータを集める  
### 3. <span style="color: darkred;">**データを整理する** </span>  
### 4. **データを解析して仮説を検証する**
<br>  

- 実は**データを使える形にする**のが最も重要！！  
- 最近総務省も[「統計表における機械判読可能なデータの表記方法の統一ルール」](https://www.soumu.go.jp/menu_news/s-news/01toukatsu01_02000186.html)を策定  
- データ入力に関する、全国民が見るべき資料と話題に


## データを使える形に整えよう
### **出発点となるデータはさまざま**
- 実験ノート、フィールドノート、データベース、エクスポート

### **Rで自分で作ったデータファイルを読む**
- "使える形"のcsvファイルとは？
- （読み込み方は後で教えます）

### **作図や解析に使えるデータ形式はほぼ決まっている**
- 行と列の数が一致
- 最初の一行が列名
- 列名を指定すれば好きなグラフが書ける！



## 整然データと雑然データとは？
<div class="column-left50">
### **整然（tidy）データ**
![](figures/tidy-data-ex1.png){width=300px}
</div>

<div class="column-right50">
### **雑然（messy）データ**
![](figures/messy-data-ex1.png){width=300px}

- １列は１つの変数
- １行は１つの観測
- １セルは１つの値

参考：[整然データとは何か](https://id.fnshr.info/2017/01/09/tidy-data-intro/)
　　：[翻訳：整然データ](https://id.fnshr.info/2017/01/09/trans-tidy-data/)
</div>


## データファイルは整然（tidy）に！

### 人が見やすい形ではなく**機械が判別しやすい**形に
- 1セル1データ
- 異なる型（文字、数字）は混ぜない
- 行列の規則性を保つ

<br>  

- 間違いやすいところを[総務省ルール](https://www.soumu.go.jp/menu_news/s-news/01toukatsu01_02000186.html)をもとに確認していきます  



## ①１セル１データとなっているか
![](figures/somu_1.jpg){width=720px}  

- 仕入れ額と出荷額のセルに複数のデータが入力されている。
- こういう場合は、年度ごとに列・行を分け、各セルにデータを分離して入力する。  


## ①１セル１データとなっているか
![](figures/somu_2.jpg){width=720px}  

- これも売上金額と費用総額が１つのセルに入力されている。
- 費用／売上を計算したいときなどに困るよね


## ②数値と文字列が混ざっていないか
![](figures/somu_3.jpg){width=720px}  

- 「円」、「▲(マイナス表記)」、「，(カンマ)」が文字列として入力されているため、数値計算ができない


## ②数値と文字列が混ざっていないか
![](figures/somu_4.jpg){width=720px}  

- 数値データに、空白が含まれると、エラーとなる。
- また、昇順・降順等の並べ替えも正確にできない。



## ②数値と文字列が混ざっていないか
![](figures/somu_5.jpg){width=720px}  


## ③セルの結合をしていないか
![](figures/somu_6.jpg){width=720px}  

- セルが結合(又は分離)されており、機械判読に適していない。
- 1件のデータは、横1行で表記し、セルの結合又は不必要な分離を行わないこと。


## ③セルの結合をしていないか
![](figures/somu_7.jpg){width=720px}  


## ④空白や改行等で体裁を整えていないか
![](figures/somu_8.jpg){width=720px}  

- スペースや改行等で体裁を整えると、検索性が低下する。


## ④空白や改行等で体裁を整えていないか
![](figures/somu_9.jpg){width=720px}  

- スペース（本来の情報とは無関係な情報）を挿入することで体裁を整えている。
- 機械は「A」と「□A」は違う意味だと判断する


## ④空白や改行等で体裁を整えていないか
![](figures/somu_10.jpg){width=720px}  

- 項目の体裁を整えるため改行が使用されているが、その改行に意味があるのか機械は判別が出来ない。



## ⑤項目名等を省略していないか
![](figures/somu_11.jpg){width=720px}  

- ヒトであれば省略されている部分の意味を判断できるが、機械は判断ができない。


## ⑤機種依存文字を使用していないか
![](figures/somu_12.jpg){width=720px}  

- 機種依存文字は利用環境によっては正しく表示されない。
- 英語で開発されたソフトウェアは、日本語だとエラーが出る可能性も。
- データもなるべく英語で作ろう！


## ⑥データが分断されていないか
![](figures/somu_13.jpg){width=600px}  

- データの分断は機械判読に支障をきたす。



## ⑥データが分断されていないか
![](figures/somu_14.jpg){width=600px}  



## ⑥１シートに複数の表がないか
![](figures/somu_15.jpg){width=720px}  

- 1シートに複数の表が掲載されている。これでは解析できない。
- 1つの表を1シートに分割して収録すること。


## tidyであればあとは何でもできる
### そういえばペンギンデータも整然だったね
```{r, echo = TRUE, message=FALSE}
library(palmerpenguins)               #読み込みはRを起動するたびに必要
head(penguins)
```


## 【重要】解析に使えるデータ形式
- **整然データ**であること！
- 保存形式について
    - Excel → 別名で保存 → ﾌｫｰﾏｯﾄ：CSV(コンマ区切り)(.csv)
- 値について
    - アルファベットか数字で（日本語は非推奨）
    - スペースを入れない（入れるならアンダーバー）
    - アンダーバー以外の記号を使わない（+-*/など）
    - 空欄はダメ。値がない場合はNAと入力。
- 列名について
    - 列名は１行だけ。２行以上を列名にはできない
    - 列名の先頭は数字にしない（数字にすると''がつけられる）



## 自分のデータを読み込もう！
### データ読み込みに便利な[readr](https://readr.tidyverse.org/)
- tidyverseパッケージ群のひとつ
- 読み込みが高速
- 安全なtibbleで読み込める
<br>
- どうしてもエクセルで読みたかったら[readxl](https://github.com/tidyverse/readxl)



## readrを使ってみよう！
### 文法（１）ファイルを読み込む

- **read_csv(file =【ファイル名を文字列で】)**
    - ファイル名は文字列なので""で囲む
        - 拡張子（.csv）は省略しない
        - csv形式のみ
        - 日本語が入力されているcsvを読み込むときは
            - read_csv("file.csv", locale = readr::locale(encoding = "CP932"))
    - ファイルは作業フォルダに入れておくこと！
    - 【任意の名前】 = read_csv()で データフレームに格納
    - read.csv（Rのデフォルト関数）とは別
        - read.csvよりもread_csvでの読み込みを推奨



## readrを使ってみよう！
### ［練習問題］
- とある植物の開花数に関する以下のメモをエクセルに入力し、CSV形式で保存しよう
    - p.22のルールを守ること
    - 保存は作業フォルダに
    
![](figures/memo.jpg){width=400px}

- 保存したcsvをread_csv()で読み込み、中身を確認head()しよう



## readrを使ってみよう！
### ［練習問題］
```{r, echo = TRUE, message=FALSE}
library("tidyverse")               #読み込みはRを起動するたびに必要
data = read_csv("test.csv")
head(data)
```

- readrで読んだデータはデータフレームの値の型が表示される！

## readrを使ってみよう！
### 文法（２）ファイルを書き出す

- **write_csv(【データフレームの名前】, file =【ファイル名】)**
    - ファイル名は文字列なので""で囲む
        - 拡張子（.csv）は省略しない
        - csv形式のみ
    - ファイルは作業フォルダに保存される
    - 日本語が含まれたcsvファイルの場合は...
        - read_csv("file.csv", locale = readr::locale(encoding = "CP932")

```{r, echo = TRUE, message=FALSE}
write_csv(data, file = "test2.csv")
```

- 作業フォルダを見るとtest2.csvがあるはず


## 自分のデータを扱うために
### **データが取れたよ！**
- よく考えてデータファイルを作ろう 
    - とにかく規則的な形, 値にしておくこと
    - 整然データを意識して
    - csv形式で保存
- （他人のデータだったらtidyrなどで整えよう）

### **どう読み込むんだっけ**
- read_csv()で読み込めるよ

###  **→[Step5：統計解析をしよう](R_training_2021_6_2.html)**
